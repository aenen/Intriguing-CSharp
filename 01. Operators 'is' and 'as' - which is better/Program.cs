using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _01
{
    class Program
    {
        static void Main(string[] args)
        {
            // Оголошуємо локальну змінну "s" типу "String"
            String s1 = "Оператори 'is' та 'as'";
            // Зберігаємо посилання на "s" в змінній "o" типу "Object"
            Object o = s1;

            /* Тип об'єкту змінної "о" може бути невідомим, тому необхідно
               впевнитись в його коректності, виконавши перевірку оператором "is".             
               В цьому коді CLR перевіряє тип об'єкту двічі:
               - спочатку в операторі "is" визначається сумісніть типу "о" з типом "String"
               - згодом в тілі оператора "if" аналізується, чи є "о" посиланням на "String".
               Це впливає на продуктивність, так як спочатку CLR з'ясовує фактичний тип, на який зсилається змінна "о",
               після чого перевіряє всю ієрархію наслідування на наявність серед базових типів заданого типу (String). */            
            if (o is String)
            {
                String s2 = (String)o;
                // Використовуємо "s2"
            }

            /* В цьому коді CLR перевіряє сумісність "о" з типом "String".
               Якщо "о" та "String" сумісні, "as" повертає ненульовий вказівник на цей об'єкт,
               а якщо ні - оператор "as" повертає null. Тут оператор "as" змушує CLR верифікувати
               тип обєкта лише 1 раз, а "if" порівнює "o" з "null". Така перевірка набагато ефективніша. */
            String s3 = o as String;
            if (s3 != null)
            {
                // Використовуємо "s3"
            }

            /* З використанням оператору "as" може виникнути проблема тільки якщо не порівняти результат з "null". */
            Object newObject = new Object();        // Створення об'єкта "Object"
            String newString = newObject as String; // "newObject" дорівнює "null"
            newString.ToString();                   // Звертання до "newString" викликає "NullReferenceException"
        }
    }
}
